<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.commulinic.mapper.DoctorMapper">
    <select id="page" resultType="com.commulinic.entity.vo.DoctorVO">
        select * from
            (select * from doctor do
            <where>
                <if test="data.id != null and data.id != 0"> and id = #{data.id} </if>
                <if test="data.userId != null and data.userId != 0"> and user_id = #{data.userId} </if>
                <if test="data.departmentId != null and data.departmentId != 0"> and department_id = #{data.departmentId}</if>
                <if test="data.status != null and data.status != 0">and status &amp; #{data.status} != 0</if>
            </where>
            <choose>
                <when test="data.seniority == null or data.seniority == 0">
                    order by id asc
                </when>
                <otherwise>
                    <if test="data.seniority == 1">order by seniority asc</if>
                    <if test="data.seniority == 2">order by seniority desc</if>
                </otherwise>
            </choose>
        ) as d
        inner join
            (select id as user_id, name, gender, phone, email from user
            <where>
                <if test="data.name != null and data.name != ''">and name like concat ('%', #{data.name}, '%')</if>
                <if test="data.phone != null and data.phone != ''">and phone like concat ('%', #{data.phone}, '%')</if>
                <if test="data.email != null and data.email != ''">and email like concat ('%', #{data.email}, '%')</if>
                <if test="data.gender != null and data.gender != 0">and gender &amp; #{data.gender} != 0</if>
                <if test="data.role != null and data.role != 0">and role &amp; #{data.role} != 0</if>
            </where>
        ) as u
        on u.user_id = d.user_id
        LIMIT #{size} OFFSET #{offset}
    </select>
    
    <update id="update">
        update doctor
            <set>
                <if test="userId != null and userId != 0"> user_id = #{userId}, </if>
                <if test="departmentId != null and departmentId != 0"> department_id = #{departmentId},</if>
                <if test="seniority != null and seniority != 0">seniority = #{seniority},</if>
                <if test="status != null and status != 0">status = #{status},</if>
                <if test="position != null and position != ''">position = #{position},</if>
    </set>
        where id = #{id}
    </update>

    <select id="count" resultType="java.lang.Long">
        select count(1) from
        (select user_id from doctor
        <where>
            <if test="id != null and id != 0"> and id = #{id} </if>
            <if test="userId != null and userId != 0"> and user_id = #{userId} </if>
            <if test="departmentId != null and departmentId != 0"> and department_id = #{departmentId}</if>
            <if test="status != null and status != 0">and status &amp; #{status} != 0</if>
            <if test="amStd != null">and am_std &gt; #{amStd}</if>
            <if test="pmStd != null">and pm_std &gt; #{pmStd}</if>
        </where>) as d
        inner join
        (select id from user
        <where>
            <if test="name != null and name != ''">and name like concat ('%', #{name}, '%')</if>
            <if test="phone != null and phone != ''">and phone like concat ('%', #{phone}, '%')</if>
            <if test="email != null and email != ''">and email like concat ('%', #{email}, '%')</if>
            <if test="gender != null and gender != 0">and gender &amp; #{gender} != 0</if>
            <if test="role != null and role != 0">and role &amp; #{role} != 0</if>
        </where>
        ) as u
        on u.id = d.user_id
    </select>

    <select id="pageWithStock" resultType="com.commulinic.entity.vo.DoctorVO">
        select * FROM (
        select d.*, u.name, u.gender from
            (select * from doctor
            <where>
                <if test="dto.data.departmentId != null and dto.data.departmentId != 0"> and department_id = #{dto.data.departmentId}</if>
                <if test="dto.data.status != null and dto.data.status != 0">and status &amp; #{dto.data.status} != 0</if>
            </where>
            ) as d inner join
            (select id as user_id, name, gender from user
            <where>
                <if test="dto.data.gender != null and dto.data.gender != 0">and gender &amp; #{dto.data.gender} != 0</if>
                <if test="dto.data.role != null and dto.data.role != 0">and role &amp; #{dto.data.role} != 0</if>
            </where>
            ) as u on u.user_id = d.user_id
        ) as tmp
        <where>
            <if test="dto.data.name != null and dto.data.name != ''">and name like concat ('%', #{dto.data.name}, '%') OR description LIKE CONCAT('%', #{dto.data.name}, '%')</if>
        </where>
        LIMIT #{dto.size} OFFSET #{dto.offset}
    </select>

    <select id="countWithStock" resultType="java.lang.Long">
        select count(1) from
        (select d.am_std, d.pm_std, u.name, d.description from
        (select * from doctor
        <where>
            <if test="dto.departmentId != null and dto.departmentId != 0"> and department_id = #{dto.departmentId}</if>
            <if test="dto.status != null and dto.status != 0">and status &amp; #{dto.status} != 0</if>
        </where>
        ) as d inner join
        (select id as user_id, name, gender, phone, email from user
        <where>
            <if test="dto.gender != null and dto.gender != 0">and gender &amp; #{dto.gender} != 0</if>
            <if test="dto.role != null and dto.role != 0">and role &amp; #{dto.role} != 0</if>
        </where>
        ) as u on u.user_id = d.user_id
        ) as tmp
        <where>
            <if test="dto.name != null and dto.name != ''">and name like concat ('%', #{dto.name}, '%') OR description LIKE CONCAT('%', #{dto.name}, '%')</if>
        </where>
    </select>
</mapper>